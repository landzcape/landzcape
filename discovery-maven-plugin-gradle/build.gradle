import groovy.json.JsonSlurper
import org.gradle.internal.os.OperatingSystem

apply plugin: 'maven'
apply plugin: 'signing'

task updateVersion(type: Exec) {
    standardOutput = new ByteArrayOutputStream()
    errorOutput = new ByteArrayOutputStream()
    workingDir "${projectDir}/../discovery-maven-plugin"
    commandLine osAdaptiveCommand('mvnw', 'versions:set', '-DnewVersion='+project.version)
    doFirst {
        println "Updating version of maven plugin to ${project.version}"
    }
    doLast {
        println standardOutput.toString()
        println errorOutput.toString()
    }
}

task mvnBuild(type: Exec, dependsOn: [':domain:install', ':explorer:install', updateVersion]) {
    standardOutput = new ByteArrayOutputStream()
    errorOutput = new ByteArrayOutputStream()
    inputs.dir "${projectDir}/../discovery-maven-plugin/src"
    inputs.file "${projectDir}/../discovery-maven-plugin/pom.xml"
    outputs.dir "${projectDir}/../discovery-maven-plugin/target"
    workingDir "${projectDir}/../discovery-maven-plugin"
    commandLine osAdaptiveCommand('mvnw', 'clean', 'install')
    doLast {
        println standardOutput.toString()
        println errorOutput.toString()
    }
}

task integrationTestBigMultiModule(type:Exec, dependsOn: mvnBuild ) {
    standardOutput = new ByteArrayOutputStream()
    errorOutput = new ByteArrayOutputStream()
    workingDir "${projectDir}/integration-test/big-multi-module"
    commandLine osAdaptiveCommand('mvnw', 'clean', 'install')
    doLast {
        println standardOutput.toString()
        println errorOutput.toString()
        assertLandscapeJsonIsAsExpected("big-multi-module")
    }
}

task integrationTestMerger(type:Exec, dependsOn: mvnBuild ) {
    standardOutput = new ByteArrayOutputStream()
    errorOutput = new ByteArrayOutputStream()
    workingDir "${projectDir}/integration-test/merger"
    commandLine osAdaptiveCommand('mvnw', 'clean', 'install')
    doLast {
        println standardOutput.toString()
        println errorOutput.toString()
        assertLandscapeJsonIsAsExpected("merger")
    }
}

task integrationTestExtractExplorer(type:Exec, dependsOn: mvnBuild ) {
    def targetDir = new File("${projectDir}/integration-test/extract")
    def appDir = new File(targetDir, "the-app")
    appDir.deleteDir()
    appDir.mkdir()
    standardOutput = new ByteArrayOutputStream()
    errorOutput = new ByteArrayOutputStream()
    workingDir "${projectDir}/integration-test/extract"
    commandLine osAdaptiveCommand('mvnw', 'clean', 'install')
    doLast {
        println standardOutput.toString()
        println errorOutput.toString()
        assert new File(appDir, "index.html").exists()
    }
}

def assertLandscapeJsonIsAsExpected(mvnProjectName) {
    def dir = "${projectDir}/integration-test/${mvnProjectName}"
    def generatedLandscape = file("${dir}/landscape.json")
    def expectedLandscape = file("${dir}/expected-landscape.json")
    assert readJson(generatedLandscape) == readJson(expectedLandscape) : "${mvnProjectName}/landscape.json differs from expectation"
}

def readJson(file) {
    def slurper = new JsonSlurper()
    return slurper.parse(file)
}

def osAdaptiveCommand(String command, String... parameters) {
    def newCommands = []
    if (OperatingSystem.current().isWindows()) {
        newCommands.addAll(['cmd', '/c', command])
    } else {
        newCommands.add('./'+command)
    }
    newCommands.addAll(parameters)
    return newCommands
}


signing {
    sign configurations.archives
}

def pluginJar = "${projectDir}/../discovery-maven-plugin/target/discovery-maven-plugin-${project.version}.jar"
def pluginSourcesJar = "${projectDir}/../discovery-maven-plugin/target/discovery-maven-plugin-${project.version}-sources.jar"

configurations.archives.artifacts.clear()
artifacts {
    archives file: file(pluginJar), name: 'discovery-maven-plugin', builtBy: mvnBuild
    archives file: file(pluginSourcesJar), name: 'discovery-maven-plugin', classifier: 'sources', builtBy: mvnBuild
}

test.dependsOn integrationTestBigMultiModule
test.dependsOn integrationTestMerger
test.dependsOn integrationTestExtractExplorer
build.dependsOn mvnBuild

uploadArchives {
    repositories {
        mavenDeployer {

            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'Landzcape Discovery Maven Plugin'
                packaging 'jar'
                description 'Landzcape Discovery Plugin for Maven'
                url 'https://www.landzcape.io'

                scm {
                    connection 'scm:git:https://github.com/landzcape/landzcape'
                    developerConnection 'scm:git:https://github.com/landzcape/landzcape'
                    url 'https://github.com/landzcape/landzcape'
                }

                developers {
                    developer {
                        id 'christian'
                        name 'Christian Ramseier'
                        email 'christian@landzcape.io'
                    }
                }
            }
        }
    }
}

task publish(dependsOn: uploadArchives) {}