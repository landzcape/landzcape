import groovy.json.JsonSlurper
import org.gradle.internal.os.OperatingSystem

apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'

task updateVersion(type: Exec) {
    standardOutput = new ByteArrayOutputStream()
    errorOutput = new ByteArrayOutputStream()
    workingDir "${projectDir}/../discovery-maven-plugin"
    commandLine osAdaptiveCommand('mvnw', 'versions:set', '-DnewVersion='+project.version)
    doFirst {
        println "Updating version of maven plugin to ${project.version}"
    }
    doLast {
        println standardOutput.toString()
        println errorOutput.toString()
    }
}

task mvnBuild(type: Exec, dependsOn: [':discovery-domain:install', ':explorer:install', updateVersion]) {
    standardOutput = new ByteArrayOutputStream()
    errorOutput = new ByteArrayOutputStream()
    inputs.dir "${projectDir}/../discovery-maven-plugin/src"
    inputs.file "${projectDir}/../discovery-maven-plugin/pom.xml"
    outputs.dir "${projectDir}/../discovery-maven-plugin/target"
    workingDir "${projectDir}/../discovery-maven-plugin"
    commandLine osAdaptiveCommand('mvnw', 'clean', 'verify')
    doLast {
        println standardOutput.toString()
        println errorOutput.toString()
    }
}

task integrationTestBigMultiModule(type:Exec, dependsOn: publishToMavenLocal ) {
    standardOutput = new ByteArrayOutputStream()
    errorOutput = new ByteArrayOutputStream()
    workingDir "${projectDir}/integration-test/big-multi-module"
    commandLine osAdaptiveCommand('mvnw', 'clean', 'verify')
    doLast {
        println standardOutput.toString()
        println errorOutput.toString()
        assertLandscapeJsonIsAsExpected("big-multi-module", "backend-landscape.json")
    }
}

task integrationTestMerger(type:Exec, dependsOn: publishToMavenLocal ) {
    standardOutput = new ByteArrayOutputStream()
    errorOutput = new ByteArrayOutputStream()
    workingDir "${projectDir}/integration-test/merger"
    commandLine osAdaptiveCommand('mvnw', 'clean', 'verify')
    doLast {
        println standardOutput.toString()
        println errorOutput.toString()
        assertLandscapeJsonIsAsExpected("merger")
    }
}

task integrationTestExtractExplorer(type:Exec, dependsOn: publishToMavenLocal ) {
    def targetDir = new File("${projectDir}/integration-test/extract")
    def appDir = new File(targetDir, "the-app")
    appDir.deleteDir()
    appDir.mkdir()
    standardOutput = new ByteArrayOutputStream()
    errorOutput = new ByteArrayOutputStream()
    workingDir "${projectDir}/integration-test/extract"
    commandLine osAdaptiveCommand('mvnw', 'clean', 'verify')
    doLast {
        println standardOutput.toString()
        println errorOutput.toString()
        assert new File(appDir, "index.html").exists()
    }
}

def assertLandscapeJsonIsAsExpected(mvnProjectName, fileName = 'landscape.json') {
    def dir = "${projectDir}/integration-test/${mvnProjectName}"
    def generatedLandscape = file("${dir}/${fileName}")
    def expectedLandscape = file("${dir}/expected-landscape.json")
    assert readJson(generatedLandscape) == readJson(expectedLandscape) : "${mvnProjectName}/landscape.json differs from expectation"
}

def readJson(file) {
    def slurper = new JsonSlurper()
    return slurper.parse(file)
}

def osAdaptiveCommand(String command, String... parameters) {
    def newCommands = []
    if (OperatingSystem.current().isWindows()) {
        newCommands.addAll(['cmd', '/c', command])
    } else {
        newCommands.add('./'+command)
    }
    newCommands.addAll(parameters)
    return newCommands
}

task prepareBackendJson(type: Copy, dependsOn: project(':discovery-gradle-plugin').generateDemo) {
    from zipTree(project(':discovery-gradle-plugin').generateDemo.outputs.files[0])
    into "${projectDir}/merge-demo"
}

task prepareFrontendJson(type: Copy, dependsOn: project(':discovery-angular-plugin').generateDemo) {
    from zipTree(project(':discovery-angular-plugin').generateDemo.outputs.files[0])
    into "${projectDir}/merge-demo"
}

task mergeDemo(type: Exec, dependsOn: [prepareBackendJson, prepareFrontendJson]) {
    standardOutput = new ByteArrayOutputStream()
    errorOutput = new ByteArrayOutputStream()
    workingDir "${projectDir}/merge-demo"
    commandLine osAdaptiveCommand('mvnw', 'clean', 'verify')
    doLast {
        println standardOutput.toString()
        println errorOutput.toString()
    }
}

task generateDemo(type: Zip, dependsOn: mergeDemo) {
    from("$projectDir/merge-demo") {
        include "landscape.json"
    }
    archiveName 'demo.zip'
}


def pluginJar = "${projectDir}/../discovery-maven-plugin/target/discovery-maven-plugin-${->project.version}.jar"
def pluginJavadocJar = "${projectDir}/../discovery-maven-plugin/target/discovery-maven-plugin-${->project.version}-javadoc.jar"
def pluginSourcesJar = "${projectDir}/../discovery-maven-plugin/target/discovery-maven-plugin-${->project.version}-sources.jar"

test.dependsOn integrationTestBigMultiModule
test.dependsOn integrationTestMerger
test.dependsOn integrationTestExtractExplorer
build.dependsOn mvnBuild

def pluginArchive = artifacts.add('archives', file(pluginJar)) {
    name 'discovery-maven-plugin'
    builtBy mvnBuild
}
def sourcesArchive = artifacts.add('archives', file(pluginSourcesJar)) {
    name 'discovery-maven-plugin'
    classifier 'sources'
    builtBy mvnBuild
}
def javadocArchive =  artifacts.add('archives', file(pluginJavadocJar)) {
    name 'discovery-maven-plugin'
    classifier 'javadoc'
    builtBy mvnBuild
}

def rootNode = new XmlSlurper().parse(file("${projectDir}/../discovery-maven-plugin/pom.xml"))
def pluginDependencies = []
rootNode.dependencies.children()
        .each {
            if(['','compile'].contains(it.scope.text())) {
                def groupId = it.groupId.text()
                def artifactId = it.artifactId.text()
                def version = it.version.text()
                        .replace('${kotlin_version}', "$kotlin_version")
                        .replace('${project.version}', "$project.version")
                pluginDependencies.push("$groupId:$artifactId:$version")
            }
        }

publishing {
    repositories {
        maven {
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
    publications {
        discoveryMavenPlugin(MavenPublication) {
            artifact pluginArchive
            artifact sourcesArchive
            artifact javadocArchive
            pom {
                artifactId = 'discovery-maven-plugin'
                name = 'Landzcape Discovery Maven Plugin'
                artifactId = 'discovery-maven-plugin'

                packaging = 'jar'
                description = 'Landzcape Discovery Plugin for Maven'
                url = 'https://www.landzcape.io'

                licenses {
                    license {
                        name = 'GNU General Public License (GPLV3+)'
                        url = 'http://www.gnu.org/licenses/gpl-3.0.html'
                    }
                }

                scm {
                    connection = 'scm:git:https://github.com/landzcape/landzcape'
                    developerConnection = 'scm:git:https://github.com/landzcape/landzcape'
                    url = 'https://github.com/landzcape/landzcape'
                }

                developers {
                    developer {
                        id = 'christian'
                        name = 'Christian Ramseier'
                        email = 'christian@landzcape.io'
                    }
                }
            }
            afterEvaluate {
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    pluginDependencies.forEach { dependency ->
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        def dependencyElements = dependency.split(":")
                        dependencyNode.appendNode('groupId', dependencyElements[0])
                        dependencyNode.appendNode('artifactId', dependencyElements[1])
                        dependencyNode.appendNode('version', dependencyElements[2])
                    }
                }
            }
        }
    }
}

signing {
    sign publishing.publications.discoveryMavenPlugin
}


task publishMavenPlugin(dependsOn: publishDiscoveryMavenPluginPublicationToMavenRepository) {}
task('promoteNexusRelease').mustRunAfter publishMavenPlugin